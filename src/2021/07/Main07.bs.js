// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_MapInt = require("rescript/lib/js/belt_MapInt.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");
var Belt_SortArrayInt = require("rescript/lib/js/belt_SortArrayInt.js");

function readLines(filename) {
  return Fs.readFileSync(Path.resolve("src", "2021", "07", filename)).toString();
}

function parseInput(s) {
  return Belt_Array.keepMap(s.split(","), Belt_Int.fromString);
}

function fst(list) {
  return Caml_option.undefined_to_opt(list.shift());
}

function minimum(list) {
  var list$1 = Belt_SortArrayInt.stableSort(list);
  var x = list$1.shift();
  if (x !== undefined) {
    if (x === undefined) {
      return ;
    } else {
      return Caml_option.some(x);
    }
  } else {
    return 0;
  }
}

function maximum(list) {
  var x = Belt_SortArrayInt.stableSort(list).pop();
  if (x !== undefined) {
    return x;
  } else {
    return 0;
  }
}

function getFuelCosts(positions, fuelCostFn) {
  var min = minimum(positions);
  var max = maximum(positions);
  var list = Belt_SortArray.stableSortBy(Belt_MapInt.toArray(Belt_Array.reduce(Belt_Array.range(min, max), undefined, (function (map, position) {
                  var distances = Belt_Array.make(positions.length, 0);
                  for(var i = 0 ,i_finish = positions.length; i <= i_finish; ++i){
                    distances[i] = Curry._2(fuelCostFn, positions[i], position);
                  }
                  return Belt_MapInt.set(map, position, Belt_Array.reduce(distances, 0, (function (sum, distance) {
                                    return sum + distance | 0;
                                  })));
                }))), (function (a, b) {
          if (a[1] > b[1]) {
            return 1;
          } else {
            return -1;
          }
        }));
  return Caml_option.undefined_to_opt(list.shift());
}

function diff(a, b) {
  return Math.abs(a - b | 0);
}

function partOne(input) {
  console.log("Part I:", getFuelCosts(parseInput(input), diff));
  
}

function sumFromOneToN(n) {
  return Math.imul(n, n + 1 | 0) / 2 | 0;
}

function partTwo(input) {
  console.log("Part II:", getFuelCosts(parseInput(input), (function (x, y) {
              return sumFromOneToN(Math.abs(x - y | 0));
            })));
  
}

function main(param) {
  var testLines = readLines("test.txt");
  var data = readLines("data.txt");
  console.log("Test");
  partOne(testLines);
  partTwo(testLines);
  console.log("\n");
  console.log("Actual");
  partOne(data);
  return partTwo(data);
}

main(undefined);

exports.readLines = readLines;
exports.parseInput = parseInput;
exports.fst = fst;
exports.minimum = minimum;
exports.maximum = maximum;
exports.getFuelCosts = getFuelCosts;
exports.diff = diff;
exports.partOne = partOne;
exports.sumFromOneToN = sumFromOneToN;
exports.partTwo = partTwo;
exports.main = main;
/*  Not a pure module */
