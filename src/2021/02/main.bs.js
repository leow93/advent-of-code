// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var initialPosition = [
  0,
  0
];

function evolve(param, direction) {
  var y = param[1];
  var x = param[0];
  switch (direction.TAG | 0) {
    case /* Forwards */0 :
        return [
                x + direction._0 | 0,
                y
              ];
    case /* Up */1 :
        return [
                x,
                y - direction._0 | 0
              ];
    case /* Down */2 :
        return [
                x,
                y + direction._0 | 0
              ];
    
  }
}

function multiply(position) {
  return Math.imul(position[0], position[1]);
}

function parseFileInstructions(filename) {
  var parseLine = function (line) {
    var data = line.split(" ");
    if (data.length !== 2) {
      console.log(data);
      return Js_exn.raiseError("Invalid line");
    }
    var direction = data[0];
    var amountStr = data[1];
    var amount = Belt_Int.fromString(amountStr);
    switch (direction) {
      case "down" :
          if (amount !== undefined) {
            return {
                    TAG: /* Down */2,
                    _0: amount
                  };
          } else {
            return Js_exn.raiseError("Could not parse line");
          }
      case "forward" :
          if (amount !== undefined) {
            return {
                    TAG: /* Forwards */0,
                    _0: amount
                  };
          } else {
            return Js_exn.raiseError("Could not parse line");
          }
      case "up" :
          if (amount !== undefined) {
            return {
                    TAG: /* Up */1,
                    _0: amount
                  };
          } else {
            return Js_exn.raiseError("Could not parse line");
          }
      default:
        return Js_exn.raiseError("Could not parse line");
    }
  };
  return Belt_Array.map(Fs.readFileSync(Path.resolve("src", "2021", "02", filename)).toString().split("\n"), parseLine);
}

function main(param) {
  var instructions = parseFileInstructions("data.txt");
  var finalPosition = Belt_Array.reduce(instructions, initialPosition, evolve);
  console.log("Part I: ", multiply(finalPosition));
  
}

main(undefined);

exports.initialPosition = initialPosition;
exports.evolve = evolve;
exports.multiply = multiply;
exports.parseFileInstructions = parseFileInstructions;
exports.main = main;
/*  Not a pure module */
